{"version":3,"sources":["logo.svg","firebase.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FormPage","useEffect","auth","signInWithEmailAndPassword","then","u","catch","err","console","log","md","className","href","fab","icon","size","label","group","type","validate","containerClass","color","rounded","App","currentUser","onAuthStateChanged","user","uid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,yJCyBzCC,IAASC,cApBa,CAUpBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBClBnB,IAoFeC,EApFE,WAUf,OARAC,qBAAU,WAGRX,IAASY,OAAOC,2BAA2B,2BAA4B,YAAYC,MAAK,SAACC,OAA8BC,OAAM,SAACC,GAASC,QAAQC,IAAIF,QAElJ,IAGK,gCACN,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQG,GAAG,KACT,kBAAC,IAAD,KACE,yBAAKC,UAAU,8BACb,kBAAC,IAAD,CAAQA,UAAU,iCAChB,wBAAIA,UAAU,yCAAd,WAIF,kBAAC,IAAD,CAAQA,UAAU,2CAChB,uBAAGC,KAAK,KAAKD,UAAU,uBACrB,kBAAC,IAAD,CAASE,KAAG,EAACC,KAAK,aAAaC,KAAK,KAAKJ,UAAU,gBAErD,uBAAGC,KAAK,KAAKD,UAAU,uBACrB,kBAAC,IAAD,CAASE,KAAG,EAACF,UAAU,iCAEzB,uBAAGC,KAAK,KAAKD,UAAU,0BACrB,kBAAC,IAAD,CAASE,KAAG,EAACF,UAAU,yCAI7B,kBAAC,IAAD,CAAaA,UAAU,aACrB,kBAAC,IAAD,CAAUK,MAAM,aAAaC,OAAK,EAACC,KAAK,OAAOC,UAAQ,IACvD,kBAAC,IAAD,CACEH,MAAM,gBACNC,OAAK,EACLC,KAAK,WACLC,UAAQ,EACRC,eAAe,SAEjB,uBAAGT,UAAU,mDAAb,SAEE,uBACEC,KAAK,KACLD,UAAU,wCAFZ,cAOF,kBAAC,IAAD,CAAQA,UAAU,uCAChB,kBAAC,IAAD,CAAQD,GAAG,IAAIC,UAAU,4BACvB,yBAAKA,UAAU,eACb,kBAAC,IAAD,CACEU,MAAM,OACNC,SAAO,EACPJ,KAAK,SACLP,UAAU,cAJZ,YAUJ,kBAAC,IAAD,CAAQD,GAAG,IAAIC,UAAU,8BACvB,uBAAGA,UAAU,6BAAb,yBAEE,uBACEC,KAAK,KACLD,UAAU,wCAFZ,qBCnCLY,MA3Bf,WAmBE,OAjBAtB,qBAAU,WAGRO,QAAQC,IAAInB,IAASY,OAAOsB,aAC5BlC,IAASY,OAAOuB,oBAAmB,SAACC,GAC9BA,GAEFlB,QAAQC,IAAIiB,EAAKC,UAKpB,IAEHnB,QAAQC,IAAInB,KAEZkB,QAAQC,IAAInB,IAASY,MAEnB,yBAAKS,UAAU,OAEb,6BAAS,kBAAC,EAAD,CAAOrB,SAAUA,QCnBZsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.60643d1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\r\nimport 'firebase/firestore'\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n \r\nconst firebaseConfigs = {\r\n   /* apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n    appId: \"1:994880379089:web:bd24da8d676a1fd0758df0\",\r\n    measurementId: \"G-KM2ZDTEXZ7\"\r\n    */\r\n    apiKey: \"AIzaSyDrK6rf-5LAeU6SS0Qja2Vr2zSMhjTA4Zg\",\r\n    authDomain: \"bug-tracker-b9b69.firebaseapp.com\",\r\n    databaseURL: \"https://bug-tracker-b9b69.firebaseio.com\",\r\n    projectId: \"bug-tracker-b9b69\",\r\n    storageBucket: \"bug-tracker-b9b69.appspot.com\",\r\n    messagingSenderId: \"994880379089\",\r\n    appId: \"1:994880379089:web:bd24da8d676a1fd0758df0\",\r\n    measurementId: \"G-KM2ZDTEXZ7\"\r\n  };\r\n  \r\n  firebase.initializeApp(firebaseConfigs);\r\n  \r\n\r\n  export {firebase}","import React, {components, useEffect,useState} from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput, MDBBtn, MDBIcon } from 'mdbreact';\r\nimport {firebase} from '../firebase'\r\n\r\nconst FormPage = () => {\r\n\r\n  useEffect(() => {\r\n    //console.log(this.props);\r\n    //console.log(firebase.auth().currentUser);\r\n    firebase.auth().signInWithEmailAndPassword(\"barinde.turkey@gmail.com\", \"hello123\").then((u) => {/*console.log(u); */}).catch((err) => {console.log(err);});\r\n   // console.log(firebase.auth());\r\n  }, [])\r\n\r\n\r\n  return (<center>\r\n    <MDBContainer>\r\n      <MDBRow>\r\n        <MDBCol md=\"6\">\r\n          <MDBCard>\r\n            <div className=\"header pt-3 peach-gradient\">\r\n              <MDBRow className=\"d-flex justify-content-center\">\r\n                <h3 className=\"white-text mb-3 pt-3 font-weight-bold\">\r\n                  Log in\r\n                </h3>\r\n              </MDBRow>\r\n              <MDBRow className=\"mt-2 mb-3 d-flex justify-content-center\">\r\n                <a href=\"#!\" className=\"fa-lg p-2 m-2 fb-ic\">\r\n                  <MDBIcon fab icon=\"facebook-f\" size=\"lg\" className=\"white-text\" />\r\n                </a>\r\n                <a href=\"#!\" className=\"fa-lg p-2 m-2 tw-ic\">\r\n                  <MDBIcon fab className=\"fa-twitter white-text fa-lg\" />\r\n                </a>\r\n                <a href=\"#!\" className=\"fa-lg p-2 m-2 gplus-ic\">\r\n                  <MDBIcon fab className=\"fa-google-plus-g white-text fa-lg\" />\r\n                </a>\r\n              </MDBRow>\r\n            </div>\r\n            <MDBCardBody className=\"mx-4 mt-4\">\r\n              <MDBInput label=\"Your email\" group type=\"text\" validate />\r\n              <MDBInput\r\n                label=\"Your password\"\r\n                group\r\n                type=\"password\"\r\n                validate\r\n                containerClass=\"mb-0\"\r\n              />\r\n              <p className=\"font-small grey-text d-flex justify-content-end\">\r\n                Forgot\r\n                <a\r\n                  href=\"#!\"\r\n                  className=\"dark-grey-text ml-1 font-weight-bold\"\r\n                >\r\n                  Password?\r\n                </a>\r\n              </p>\r\n              <MDBRow className=\"d-flex align-items-center mb-4 mt-5\">\r\n                <MDBCol md=\"5\" className=\"d-flex align-items-start\">\r\n                  <div className=\"text-center\">\r\n                    <MDBBtn\r\n                      color=\"grey\"\r\n                      rounded\r\n                      type=\"button\"\r\n                      className=\"z-depth-1a\"\r\n                    >\r\n                      Log in\r\n                    </MDBBtn>\r\n                  </div>\r\n                </MDBCol>\r\n                <MDBCol md=\"7\" className=\"d-flex justify-content-end\">\r\n                  <p className=\"font-small grey-text mt-3\">\r\n                    Don't have an account?\r\n                    <a\r\n                      href=\"#!\"\r\n                      className=\"dark-grey-text ml-1 font-weight-bold\"\r\n                    >\r\n                      Sign up\r\n                    </a>\r\n                  </p>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer></center>\r\n  );\r\n};\r\n\r\nexport default FormPage;","import React, {components, useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from \"./components/login\"\nimport {firebase} from './firebase'\n//import {base} from './rebase'\n\n\n\nfunction App() {\n  \n  useEffect(() => {\n    //firebase.auth().signInWithEmailAndPassword(\"barinde.turkey@gmail.com\", \"hello123\").then((u) => {console.log(u);}).catch((err) => {console.log(err);});\n    //firebase.auth().createUserWithEmailAndPassword(\"barinde.turkey@gmail.com\", \"hello123\").then((u) => {console.log(u);}).catch((err) => {console.log(err);});\n    console.log(firebase.auth().currentUser);\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User logged in already or has just logged in.\n        console.log(user.uid);\n      } else {\n        // User not logged in or has just logged out.\n      }\n    });\n  }, [])\n \n  console.log(firebase);\n  \n  console.log(firebase.auth);\n  return (\n    <div className=\"App\">\n    \n      <br></br><Login firebase={firebase}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}